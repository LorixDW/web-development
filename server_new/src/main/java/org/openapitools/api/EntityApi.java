/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Entity;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-05-19T18:59:56.083+03:00[Europe/Moscow]")
@Validated
@Tag(name = "entity", description = "the entity API")
public interface EntityApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /entity : Delete vegetable or Fruit
     *
     * @param ID Identificator (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbiden (status code 403)
     *         or Not found entity (status code 404)
     */
    @Operation(
        operationId = "entityDelete",
        summary = "Delete vegetable or Fruit",
        tags = { "Entity management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbiden", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found entity", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/entity",
        produces = { "text/html" }
    )
    default ResponseEntity<String> entityDelete(
        @NotNull @Parameter(name = "ID", description = "Identificator", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ID", required = true) Integer ID
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /entity : Get Vegatables and Fruits list
     * Get list of vegatables and fruits according to entered parameters
     *
     * @param type Type of entities - vegatables or fruits (optioonal) (optional)
     * @return Successful response (status code 200)
     *         or Forbiden (status code 403)
     *         or Not found (status code 404)
     */
    @Operation(
        operationId = "entityGet",
        summary = "Get Vegatables and Fruits list",
        description = "Get list of vegatables and fruits according to entered parameters",
        tags = { "Entity management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Entity.class))),
                @Content(mediaType = "text/html", array = @ArraySchema(schema = @Schema(implementation = Entity.class)))
            }),
            @ApiResponse(responseCode = "403", description = "Forbiden", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class)),
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/entity",
        produces = { "application/json", "text/html" }
    )
    default ResponseEntity<List<Entity>> entityGet(
        @Parameter(name = "type", description = "Type of entities - vegatables or fruits (optioonal)", in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = false) String type
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"name\" : \"Lemon\", \"id\" : 0, \"type\" : \"fruit\" }, { \"name\" : \"Lemon\", \"id\" : 0, \"type\" : \"fruit\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /entity : Post Vegatable or Fruit
     * Post vegetable or fruit with entered parameters
     *
     * @param type Type of entities - vegatables or fruits (required)
     * @param name Name of vegetable or fruit (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbiden (status code 403)
     *         or Not found entity (status code 404)
     */
    @Operation(
        operationId = "entityPost",
        summary = "Post Vegatable or Fruit",
        description = "Post vegetable or fruit with entered parameters",
        tags = { "Entity management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbiden", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found entity", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/entity",
        produces = { "text/html" }
    )
    default ResponseEntity<String> entityPost(
        @NotNull @Parameter(name = "type", description = "Type of entities - vegatables or fruits", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = true, defaultValue = "vegetable") String type,
        @NotNull @Parameter(name = "Name", description = "Name of vegetable or fruit", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "Name", required = true) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /entity : Replace vegetable or Fruit
     * Replace vegetable or fruit with entered parameters
     *
     * @param ID Identificator (required)
     * @param type Type of entities - vegatables or fruits (required)
     * @param name Name of vegetable or fruit (required)
     * @return Successful response (status code 200)
     *         or Bad request (status code 400)
     *         or Forbiden (status code 403)
     *         or Not found entity (status code 404)
     */
    @Operation(
        operationId = "entityPut",
        summary = "Replace vegetable or Fruit",
        description = "Replace vegetable or fruit with entered parameters",
        tags = { "Entity management" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "403", description = "Forbiden", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not found entity", content = {
                @Content(mediaType = "text/html", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/entity",
        produces = { "text/html" }
    )
    default ResponseEntity<String> entityPut(
        @NotNull @Parameter(name = "ID", description = "Identificator", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "ID", required = true) Integer ID,
        @NotNull @Parameter(name = "type", description = "Type of entities - vegatables or fruits", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "type", required = true, defaultValue = "vegetable") String type,
        @NotNull @Parameter(name = "Name", description = "Name of vegetable or fruit", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "Name", required = true) String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf(""))) {
                    String exampleString = "";
                    ApiUtil.setExampleResponse(request, "", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
